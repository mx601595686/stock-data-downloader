"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schedule = require("node-schedule");
const service_starter_1 = require("service-starter");
const sql = require("./Sql");
const SH_A_Code_sjs_1 = require("./downloader/SH_A_Code_sjs");
const SZ_A_Code_sjs_1 = require("./downloader/SZ_A_Code_sjs");
/**
 * 股票代码下载器
 */
class StockCodeDownloader extends service_starter_1.BaseServiceModule {
    constructor() {
        super(...arguments);
        this._downloading = false; //是否正在下载
    }
    async _downloader() {
        if (!this._downloading) {
            this._downloading = true;
            const jobID = await this._statusRecorder.newStartTime(this);
            try {
                await SH_A_Code_sjs_1.SH_A_Code_sjs().catch(err => { throw new Error('下载上交所股票代码异常：' + err); });
                await SZ_A_Code_sjs_1.SZ_A_Code_sjs().catch(err => { throw new Error('下载深交所股票代码异常：' + err); });
                await this._statusRecorder.updateEndTime(this, jobID);
            }
            catch (error) {
                await this._statusRecorder.updateError(this, jobID, error);
                throw error;
            }
            finally {
                this._downloading = false;
            }
        }
    }
    ;
    async onStart() {
        this._connection = this.services.MysqlConnection;
        this._statusRecorder = this.services.ModuleStatusRecorder;
        await this._connection.asyncQuery(sql.create_table); //创建数据表
        const status = await this._statusRecorder.getStatus(this);
        if (status == null || status.error != null || status.startTime > status.endTime) {
            //如果没下载过或上次下载出现过异常，则立即重新下载
            await this._downloader();
        }
        //每周星期五的10点钟更新
        this._timer = schedule.scheduleJob({ hour: 10, dayOfWeek: 5 }, () => this._downloader().catch(err => this.emit('error', err)));
    }
    async onStop() {
        this._timer.cancel();
    }
}
exports.StockCodeDownloader = StockCodeDownloader;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvU3RvY2tDb2RlRG93bmxvYWRlci9TdG9ja0NvZGVEb3dubG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMENBQTBDO0FBQzFDLHFEQUFvRDtBQUVwRCw2QkFBNkI7QUFJN0IsOERBQTJEO0FBQzNELDhEQUEyRDtBQUUzRDs7R0FFRztBQUNILHlCQUFpQyxTQUFRLG1DQUFpQjtJQUExRDs7UUFLWSxpQkFBWSxHQUFZLEtBQUssQ0FBQyxDQUFFLFFBQVE7SUF1Q3BELENBQUM7SUFyQ1csS0FBSyxDQUFDLFdBQVc7UUFDckIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztZQUN6QixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRTVELElBQUksQ0FBQztnQkFDRCxNQUFNLDZCQUFhLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5RSxNQUFNLDZCQUFhLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxNQUFNLElBQUksS0FBSyxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUU5RSxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMxRCxDQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDYixNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQzNELE1BQU0sS0FBSyxDQUFDO1lBQ2hCLENBQUM7b0JBQVMsQ0FBQztnQkFDUCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUM5QixDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUFBQSxDQUFDO0lBRUYsS0FBSyxDQUFDLE9BQU87UUFDVCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDO1FBQ2pELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQztRQUMxRCxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFFLE9BQU87UUFFN0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRCxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDOUUsMEJBQTBCO1lBQzFCLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzdCLENBQUM7UUFFRCxjQUFjO1FBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuSSxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQU07UUFDUixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3pCLENBQUM7Q0FDSjtBQTVDRCxrREE0Q0MiLCJmaWxlIjoibW9kdWxlcy9TdG9ja0NvZGVEb3dubG9hZGVyL1N0b2NrQ29kZURvd25sb2FkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzY2hlZHVsZSBmcm9tICdub2RlLXNjaGVkdWxlJztcclxuaW1wb3J0IHsgQmFzZVNlcnZpY2VNb2R1bGUgfSBmcm9tIFwic2VydmljZS1zdGFydGVyXCI7XHJcblxyXG5pbXBvcnQgKiBhcyBzcWwgZnJvbSAnLi9TcWwnO1xyXG5pbXBvcnQgeyBNeXNxbENvbm5lY3Rpb24gfSBmcm9tIFwiLi4vTXlzcWxDb25uZWN0aW9uL015c3FsQ29ubmVjdGlvblwiO1xyXG5pbXBvcnQgeyBNb2R1bGVTdGF0dXNSZWNvcmRlciB9IGZyb20gXCIuLi9Nb2R1bGVTdGF0dXNSZWNvcmRlci9Nb2R1bGVTdGF0dXNSZWNvcmRlclwiO1xyXG5cclxuaW1wb3J0IHsgU0hfQV9Db2RlX3NqcyB9IGZyb20gXCIuL2Rvd25sb2FkZXIvU0hfQV9Db2RlX3Nqc1wiO1xyXG5pbXBvcnQgeyBTWl9BX0NvZGVfc2pzIH0gZnJvbSBcIi4vZG93bmxvYWRlci9TWl9BX0NvZGVfc2pzXCI7XHJcblxyXG4vKipcclxuICog6IKh56Wo5Luj56CB5LiL6L295ZmoXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RvY2tDb2RlRG93bmxvYWRlciBleHRlbmRzIEJhc2VTZXJ2aWNlTW9kdWxlIHtcclxuXHJcbiAgICBwcml2YXRlIF90aW1lcjogc2NoZWR1bGUuSm9iOyAgICAvL+S/neWtmOiuoeaXtuWZqFxyXG4gICAgcHJpdmF0ZSBfY29ubmVjdGlvbjogTXlzcWxDb25uZWN0aW9uO1xyXG4gICAgcHJpdmF0ZSBfc3RhdHVzUmVjb3JkZXI6IE1vZHVsZVN0YXR1c1JlY29yZGVyO1xyXG4gICAgcHJpdmF0ZSBfZG93bmxvYWRpbmc6IGJvb2xlYW4gPSBmYWxzZTsgIC8v5piv5ZCm5q2j5Zyo5LiL6L29XHJcblxyXG4gICAgcHJpdmF0ZSBhc3luYyBfZG93bmxvYWRlcigpIHsgIC8v5LiL6L295ZmoXHJcbiAgICAgICAgaWYgKCF0aGlzLl9kb3dubG9hZGluZykgeyAgIC8v5aaC5p6c5LiK5qyh6L+Y5rKh5pyJ5omn6KGM5a6M6L+Z5qyh5bCx5Y+W5raI5omn6KGM5LqGXHJcbiAgICAgICAgICAgIHRoaXMuX2Rvd25sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc3Qgam9iSUQgPSBhd2FpdCB0aGlzLl9zdGF0dXNSZWNvcmRlci5uZXdTdGFydFRpbWUodGhpcyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgU0hfQV9Db2RlX3NqcygpLmNhdGNoKGVyciA9PiB7IHRocm93IG5ldyBFcnJvcign5LiL6L295LiK5Lqk5omA6IKh56Wo5Luj56CB5byC5bi477yaJyArIGVycikgfSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBTWl9BX0NvZGVfc2pzKCkuY2F0Y2goZXJyID0+IHsgdGhyb3cgbmV3IEVycm9yKCfkuIvovb3mt7HkuqTmiYDogqHnpajku6PnoIHlvILluLjvvJonICsgZXJyKSB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9zdGF0dXNSZWNvcmRlci51cGRhdGVFbmRUaW1lKHRoaXMsIGpvYklEKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3N0YXR1c1JlY29yZGVyLnVwZGF0ZUVycm9yKHRoaXMsIGpvYklELCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Rvd25sb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGFzeW5jIG9uU3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdGhpcy5fY29ubmVjdGlvbiA9IHRoaXMuc2VydmljZXMuTXlzcWxDb25uZWN0aW9uO1xyXG4gICAgICAgIHRoaXMuX3N0YXR1c1JlY29yZGVyID0gdGhpcy5zZXJ2aWNlcy5Nb2R1bGVTdGF0dXNSZWNvcmRlcjtcclxuICAgICAgICBhd2FpdCB0aGlzLl9jb25uZWN0aW9uLmFzeW5jUXVlcnkoc3FsLmNyZWF0ZV90YWJsZSk7ICAvL+WIm+W7uuaVsOaNruihqFxyXG5cclxuICAgICAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCB0aGlzLl9zdGF0dXNSZWNvcmRlci5nZXRTdGF0dXModGhpcyk7XHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PSBudWxsIHx8IHN0YXR1cy5lcnJvciAhPSBudWxsIHx8IHN0YXR1cy5zdGFydFRpbWUgPiBzdGF0dXMuZW5kVGltZSkge1xyXG4gICAgICAgICAgICAvL+WmguaenOayoeS4i+i9vei/h+aIluS4iuasoeS4i+i9veWHuueOsOi/h+W8guW4uO+8jOWImeeri+WNs+mHjeaWsOS4i+i9vVxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9kb3dubG9hZGVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL+avj+WRqOaYn+acn+S6lOeahDEw54K56ZKf5pu05pawXHJcbiAgICAgICAgdGhpcy5fdGltZXIgPSBzY2hlZHVsZS5zY2hlZHVsZUpvYih7IGhvdXI6IDEwLCBkYXlPZldlZWs6IDUgfSwgKCkgPT4gdGhpcy5fZG93bmxvYWRlcigpLmNhdGNoKGVyciA9PiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG9uU3RvcCgpIHtcclxuICAgICAgICB0aGlzLl90aW1lci5jYW5jZWwoKTtcclxuICAgIH1cclxufVxyXG4iXX0=
