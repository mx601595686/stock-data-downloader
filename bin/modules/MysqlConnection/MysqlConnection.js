"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mysql = require("mysql");
const service_starter_1 = require("service-starter");
const createDB = "CREATE SCHEMA IF NOT EXISTS `stock`;";
/**
 * 连接mysql并创建数据库
 */
class MysqlConnection extends service_starter_1.BaseServiceModule {
    /**
     * 对mysql的query方法进行了一下包装，使之支持Promise
     */
    asyncQuery(sql, values) {
        return new Promise((resolve, reject) => {
            this.connection.query(sql, values, function (err, result, filed) {
                err ? reject(err) : resolve(result);
            });
        });
    }
    onStart() {
        return new Promise((resolve, reject) => {
            this.connection = mysql.createConnection({
                host: process.env.MYSQL_HOST_ADDR || 'localhost',
                port: process.env.MYSQL_HOST_PORT || 3306,
                user: process.env.MYSQL_USERNAME || 'root',
                password: process.env.MYSQL_PASSWORD || 'root' //登陆密码
            });
            this.connection.connect(err => {
                if (err) {
                    reject(err);
                }
                else {
                    this.connection.query(createDB, err => err ? reject(err) : resolve());
                }
            });
            this.connection.on("end", (err) => {
                if (err)
                    this.emit('error', err);
                if (this.servicesManager.status !== service_starter_1.RunningStatus.stopping && this.servicesManager.status !== service_starter_1.RunningStatus.stopped)
                    this.servicesManager.stop();
            });
            this.connection.on("error", err => this.emit("error", err));
        });
    }
    onStop() {
        return new Promise((resolve, reject) => {
            this.connection.end(err => err ? reject(err) : resolve());
        });
    }
    async onHealthCheck() {
        try {
            await this.asyncQuery("SELECT 'OK';");
        }
        catch (error) {
            throw new Error('数据库连接状态异常：' + error);
        }
    }
}
exports.MysqlConnection = MysqlConnection;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvTXlzcWxDb25uZWN0aW9uL015c3FsQ29ubmVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUErQjtBQUMvQixxREFBbUU7QUFFbkUsTUFBTSxRQUFRLEdBQUcsc0NBQXNDLENBQUM7QUFFeEQ7O0dBRUc7QUFDSCxxQkFBNkIsU0FBUSxtQ0FBaUI7SUFJbEQ7O09BRUc7SUFDSCxVQUFVLENBQUMsR0FBVyxFQUFFLE1BQWM7UUFDbEMsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsVUFBVSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUs7Z0JBQzNELEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxPQUFPO1FBQ0gsTUFBTSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLGdCQUFnQixDQUFDO2dCQUNyQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksV0FBVztnQkFDaEQsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLElBQUk7Z0JBQ3pDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxNQUFNO2dCQUMxQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUksTUFBTSxDQUFNLE1BQU07YUFDN0QsQ0FBQyxDQUFDO1lBRUgsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzFCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ04sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNoQixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO2dCQUMxRSxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDOUIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDO29CQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUVqQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sS0FBSywrQkFBYSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sS0FBSywrQkFBYSxDQUFDLE9BQU8sQ0FBQztvQkFDaEgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQyxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEUsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsTUFBTTtRQUNGLE1BQU0sQ0FBQyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUN6QyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELEtBQUssQ0FBQyxhQUFhO1FBQ2YsSUFBSSxDQUFDO1lBQ0QsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzFDLENBQUM7UUFBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDMUMsQ0FBQztJQUNMLENBQUM7Q0FDSjtBQXhERCwwQ0F3REMiLCJmaWxlIjoibW9kdWxlcy9NeXNxbENvbm5lY3Rpb24vTXlzcWxDb25uZWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbXlzcWwgZnJvbSAnbXlzcWwnO1xyXG5pbXBvcnQgeyBCYXNlU2VydmljZU1vZHVsZSwgUnVubmluZ1N0YXR1cyB9IGZyb20gXCJzZXJ2aWNlLXN0YXJ0ZXJcIjtcclxuXHJcbmNvbnN0IGNyZWF0ZURCID0gXCJDUkVBVEUgU0NIRU1BIElGIE5PVCBFWElTVFMgYHN0b2NrYDtcIjtcclxuXHJcbi8qKlxyXG4gKiDov57mjqVteXNxbOW5tuWIm+W7uuaVsOaNruW6k1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE15c3FsQ29ubmVjdGlvbiBleHRlbmRzIEJhc2VTZXJ2aWNlTW9kdWxlIHtcclxuXHJcbiAgICBjb25uZWN0aW9uOiBteXNxbC5Db25uZWN0aW9uO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5a+5bXlzcWznmoRxdWVyeeaWueazlei/m+ihjOS6huS4gOS4i+WMheijhe+8jOS9v+S5i+aUr+aMgVByb21pc2VcclxuICAgICAqL1xyXG4gICAgYXN5bmNRdWVyeShzcWw6IHN0cmluZywgdmFsdWVzPzogYW55W10pIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8YW55PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5xdWVyeShzcWwsIHZhbHVlcywgZnVuY3Rpb24gKGVyciwgcmVzdWx0LCBmaWxlZCkge1xyXG4gICAgICAgICAgICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uU3RhcnQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uID0gbXlzcWwuY3JlYXRlQ29ubmVjdGlvbih7XHJcbiAgICAgICAgICAgICAgICBob3N0OiBwcm9jZXNzLmVudi5NWVNRTF9IT1NUX0FERFIgfHwgJ2xvY2FsaG9zdCcsICAgLy/kuLvmnLrlnLDlnYBcclxuICAgICAgICAgICAgICAgIHBvcnQ6IHByb2Nlc3MuZW52Lk1ZU1FMX0hPU1RfUE9SVCB8fCAzMzA2LCAgICAgICAgICAvL+i/nuaOpeerr+WPo1xyXG4gICAgICAgICAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuTVlTUUxfVVNFUk5BTUUgfHwgJ3Jvb3QnLCAgICAgICAgIC8v55So5oi35ZCNXHJcbiAgICAgICAgICAgICAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuTVlTUUxfUEFTU1dPUkQgfHwgJ3Jvb3QnICAgICAgLy/nmbvpmYblr4bnoIFcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24uY29ubmVjdChlcnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgLy/liJvlu7rns7vnu5/miYDpnIDnmoTmlbDmja7lupNcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3Rpb24ucXVlcnkoY3JlYXRlREIsIGVyciA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLm9uKFwiZW5kXCIsIChlcnIpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpIHRoaXMuZW1pdCgnZXJyb3InLCBlcnIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlcnZpY2VzTWFuYWdlci5zdGF0dXMgIT09IFJ1bm5pbmdTdGF0dXMuc3RvcHBpbmcgJiYgdGhpcy5zZXJ2aWNlc01hbmFnZXIuc3RhdHVzICE9PSBSdW5uaW5nU3RhdHVzLnN0b3BwZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJ2aWNlc01hbmFnZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGlvbi5vbihcImVycm9yXCIsIGVyciA9PiB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvblN0b3AoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0aW9uLmVuZChlcnIgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIG9uSGVhbHRoQ2hlY2soKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hc3luY1F1ZXJ5KFwiU0VMRUNUICdPSyc7XCIpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5pWw5o2u5bqT6L+e5o6l54q25oCB5byC5bi477yaJyArIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=
