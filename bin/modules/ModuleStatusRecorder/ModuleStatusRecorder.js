"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const log_formatter_1 = require("log-formatter");
const service_starter_1 = require("service-starter");
const sql = require("./Sql");
/**
 * 记录模块当前的运行状态
 */
class ModuleStatusRecorder extends service_starter_1.BaseServiceModule {
    /**
     * 获取最近一次执行的状态信息。
     * 从未执行过，则返回void
     */
    async getStatus(module) {
        const data = await this._connection.asyncQuery(sql.query_last, [module.name]);
        if (data.length > 0) {
            return {
                id: data[0].id,
                startTime: data[0].start_time,
                endTime: data[0].end_time,
                error: data[0].error
            };
        }
    }
    /**
     * 获取最近一次执行成功时的状态信息
     * 没有则返回void
     */
    async getLatestSuccessStatus(module) {
        const data = await this._connection.asyncQuery(sql.query_latest_success, [module.name]);
        if (data.length > 0) {
            return {
                id: data[0].id,
                startTime: data[0].start_time,
                endTime: data[0].end_time,
                error: data[0].error
            };
        }
    }
    /**
     * 插入新的运行开始时间。
     * 发回插入行的id
     */
    async newStartTime(module) {
        log_formatter_1.default.location.text.blue.round(module.name, '开始下载');
        const result = await this._connection.asyncQuery(sql.insert_start_time, [module.name, Date.now()]);
        return result.insertId;
    }
    /**
     * 更新运行结束时间
     *
     * @param id newStartTime返回的id
     */
    async updateEndTime(module, id) {
        log_formatter_1.default.location.text.green.round(module.name, '下载结束');
        await this._connection.asyncQuery(sql.update_end_time, [Date.now(), id]);
    }
    /**
     * 更新错误消息
     */
    async updateError(module, id, err) {
        log_formatter_1.default.location.text.red.round.content.red(module.name, '下载出现异常', err);
        await this._connection.asyncQuery(sql.update_error, [Date.now(), err.toString(), id]);
    }
    async onStart() {
        this._connection = this.services.MysqlConnection;
        await this._connection.asyncQuery(sql.create);
    }
}
exports.ModuleStatusRecorder = ModuleStatusRecorder;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZXMvTW9kdWxlU3RhdHVzUmVjb3JkZXIvTW9kdWxlU3RhdHVzUmVjb3JkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBZ0M7QUFDaEMscURBQW9EO0FBR3BELDZCQUE2QjtBQUU3Qjs7R0FFRztBQUNILDBCQUFrQyxTQUFRLG1DQUFpQjtJQUl2RDs7O09BR0c7SUFDSCxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQXlCO1FBQ3JDLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRTlFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQixNQUFNLENBQUM7Z0JBQ0gsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFZO2dCQUN4QixTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQW9CO2dCQUN2QyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQWtCO2dCQUNuQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQTJCO2FBQzdDLENBQUM7UUFDTixDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxNQUF5QjtRQUNsRCxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRXhGLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQixNQUFNLENBQUM7Z0JBQ0gsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFZO2dCQUN4QixTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQW9CO2dCQUN2QyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQWtCO2dCQUNuQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQTJCO2FBQzdDLENBQUM7UUFDTixDQUFDO0lBQ0wsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBeUI7UUFDeEMsdUJBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNsRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuRyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBeUIsRUFBRSxFQUFVO1FBQ3JELHVCQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkQsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUF5QixFQUFFLEVBQVUsRUFBRSxHQUFVO1FBQy9ELHVCQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEUsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFGLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTztRQUNULElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUM7UUFDakQsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQztDQUNKO0FBdEVELG9EQXNFQyIsImZpbGUiOiJtb2R1bGVzL01vZHVsZVN0YXR1c1JlY29yZGVyL01vZHVsZVN0YXR1c1JlY29yZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICdsb2ctZm9ybWF0dGVyJztcclxuaW1wb3J0IHsgQmFzZVNlcnZpY2VNb2R1bGUgfSBmcm9tIFwic2VydmljZS1zdGFydGVyXCI7XHJcblxyXG5pbXBvcnQgeyBNeXNxbENvbm5lY3Rpb24gfSBmcm9tIFwiLi4vTXlzcWxDb25uZWN0aW9uL015c3FsQ29ubmVjdGlvblwiO1xyXG5pbXBvcnQgKiBhcyBzcWwgZnJvbSAnLi9TcWwnO1xyXG5cclxuLyoqXHJcbiAqIOiusOW9leaooeWdl+W9k+WJjeeahOi/kOihjOeKtuaAgVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1vZHVsZVN0YXR1c1JlY29yZGVyIGV4dGVuZHMgQmFzZVNlcnZpY2VNb2R1bGUge1xyXG5cclxuICAgIHByaXZhdGUgX2Nvbm5lY3Rpb246IE15c3FsQ29ubmVjdGlvbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluacgOi/keS4gOasoeaJp+ihjOeahOeKtuaAgeS/oeaBr+OAglxyXG4gICAgICog5LuO5pyq5omn6KGM6L+H77yM5YiZ6L+U5Zuedm9pZFxyXG4gICAgICovXHJcbiAgICBhc3luYyBnZXRTdGF0dXMobW9kdWxlOiBCYXNlU2VydmljZU1vZHVsZSkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLl9jb25uZWN0aW9uLmFzeW5jUXVlcnkoc3FsLnF1ZXJ5X2xhc3QsIFttb2R1bGUubmFtZV0pO1xyXG5cclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBpZDogZGF0YVswXS5pZCBhcyBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBzdGFydFRpbWU6IGRhdGFbMF0uc3RhcnRfdGltZSBhcyBudW1iZXIsXHJcbiAgICAgICAgICAgICAgICBlbmRUaW1lOiBkYXRhWzBdLmVuZF90aW1lIGFzIG51bWJlcixcclxuICAgICAgICAgICAgICAgIGVycm9yOiBkYXRhWzBdLmVycm9yIGFzIHN0cmluZyB8IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluacgOi/keS4gOasoeaJp+ihjOaIkOWKn+aXtueahOeKtuaAgeS/oeaBr1xyXG4gICAgICog5rKh5pyJ5YiZ6L+U5Zuedm9pZFxyXG4gICAgICovXHJcbiAgICBhc3luYyBnZXRMYXRlc3RTdWNjZXNzU3RhdHVzKG1vZHVsZTogQmFzZVNlcnZpY2VNb2R1bGUpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5fY29ubmVjdGlvbi5hc3luY1F1ZXJ5KHNxbC5xdWVyeV9sYXRlc3Rfc3VjY2VzcywgW21vZHVsZS5uYW1lXSk7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGlkOiBkYXRhWzBdLmlkIGFzIG51bWJlcixcclxuICAgICAgICAgICAgICAgIHN0YXJ0VGltZTogZGF0YVswXS5zdGFydF90aW1lIGFzIG51bWJlcixcclxuICAgICAgICAgICAgICAgIGVuZFRpbWU6IGRhdGFbMF0uZW5kX3RpbWUgYXMgbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgZXJyb3I6IGRhdGFbMF0uZXJyb3IgYXMgc3RyaW5nIHwgdW5kZWZpbmVkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5o+S5YWl5paw55qE6L+Q6KGM5byA5aeL5pe26Ze044CCXHJcbiAgICAgKiDlj5Hlm57mj5LlhaXooYznmoRpZFxyXG4gICAgICovXHJcbiAgICBhc3luYyBuZXdTdGFydFRpbWUobW9kdWxlOiBCYXNlU2VydmljZU1vZHVsZSk6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgICAgICAgbG9nLmxvY2F0aW9uLnRleHQuYmx1ZS5yb3VuZChtb2R1bGUubmFtZSwgJ+W8gOWni+S4i+i9vScpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2Nvbm5lY3Rpb24uYXN5bmNRdWVyeShzcWwuaW5zZXJ0X3N0YXJ0X3RpbWUsIFttb2R1bGUubmFtZSwgRGF0ZS5ub3coKV0pO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQuaW5zZXJ0SWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmm7TmlrDov5DooYznu5PmnZ/ml7bpl7RcclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGlkIG5ld1N0YXJ0VGltZei/lOWbnueahGlkXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHVwZGF0ZUVuZFRpbWUobW9kdWxlOiBCYXNlU2VydmljZU1vZHVsZSwgaWQ6IG51bWJlcikge1xyXG4gICAgICAgIGxvZy5sb2NhdGlvbi50ZXh0LmdyZWVuLnJvdW5kKG1vZHVsZS5uYW1lLCAn5LiL6L2957uT5p2fJyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5fY29ubmVjdGlvbi5hc3luY1F1ZXJ5KHNxbC51cGRhdGVfZW5kX3RpbWUsIFtEYXRlLm5vdygpLCBpZF0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5pu05paw6ZSZ6K+v5raI5oGvXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHVwZGF0ZUVycm9yKG1vZHVsZTogQmFzZVNlcnZpY2VNb2R1bGUsIGlkOiBudW1iZXIsIGVycjogRXJyb3IpIHtcclxuICAgICAgICBsb2cubG9jYXRpb24udGV4dC5yZWQucm91bmQuY29udGVudC5yZWQobW9kdWxlLm5hbWUsICfkuIvovb3lh7rnjrDlvILluLgnLCBlcnIpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuX2Nvbm5lY3Rpb24uYXN5bmNRdWVyeShzcWwudXBkYXRlX2Vycm9yLCBbRGF0ZS5ub3coKSwgZXJyLnRvU3RyaW5nKCksIGlkXSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb25TdGFydCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICB0aGlzLl9jb25uZWN0aW9uID0gdGhpcy5zZXJ2aWNlcy5NeXNxbENvbm5lY3Rpb247XHJcbiAgICAgICAgYXdhaXQgdGhpcy5fY29ubmVjdGlvbi5hc3luY1F1ZXJ5KHNxbC5jcmVhdGUpO1xyXG4gICAgfVxyXG59Il19
